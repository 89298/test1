import java.util.Scanner;

public class PasswordManager {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("请选择功能：");
        System.out.println("1.加密");
        System.out.println("2.解密");
        int choice = scanner.nextInt();
        scanner.nextLine(); // 清空输入缓冲区

        switch (choice) {
            case 1:
                System.out.println("请输入要加密的字符串：");
                String inputEncrypt = scanner.nextLine();
                String encryptedString = encrypt(inputEncrypt);
                System.out.println("加密后的字符串：" + encryptedString);
                break;
            case 2:
                System.out.println("请输入要解密的字符串：");
                String inputDecrypt = scanner.nextLine();
                String decryptedString = decrypt(inputDecrypt);
                System.out.println("解密后的字符串：" + decryptedString);
                break;
            default:
                System.out.println("无效的选择！");
        }

        scanner.close();
    }

    private static String encrypt(String input) {
        char[] chars = input.toCharArray();
        int offset = 3;

        // 将每个字符的ASCII码加上它在字符串中的位置和偏移值
        for (int i = 0; i < chars.length; i++) {
            chars[i] = (char) (chars[i] + i + offset);
        }

        // 将字符串的第一位和最后一位调换顺序
        if (chars.length > 1) {
            char temp = chars[0];
            chars[0] = chars[chars.length - 1];
            chars[chars.length - 1] = temp;
        }

        // 将字符串反转
        StringBuilder sb = new StringBuilder();
        for (int i = chars.length - 1; i >= 0; i--) {
            sb.append(chars[i]);
        }

        return sb.toString();
    }

    private static String decrypt(String input) {
        char[] chars = input.toCharArray();

        // 反转字符串
        StringBuilder sb = new StringBuilder();
        for (int i = chars.length - 1; i >= 0; i--) {
            sb.append(chars[i]);
        }

        chars = sb.toString().toCharArray();
        int offset = 3;

        // 将每个字符的ASCII码减去它在字符串中的位置和偏移值
        for (int i = 0; i < chars.length; i++) {
            chars[i] = (char) (chars[i] - i - offset);
        }

        // 将字符串的第一位和最后一位调换顺序
        if (chars.length > 1) {
            char temp = chars[0];
            chars[0] = chars[chars.length - 1];
            chars[chars.length - 1] = temp;
        }

        return new String(chars);
    }
}

202210089298