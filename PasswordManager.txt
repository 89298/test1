2023.12.19
import java.util.Scanner;
import java.security.SecureRandom;
import java.util.Random;

=======
import java.util.Scanner;//change1
>>>>>>> 07fe9714d5e42a04726157b0f0913725c0ea190a
public class PasswordManager {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("==============================");
            System.out.println("欢迎使用密码管理系统");
            System.out.println("==============================");
            System.out.println("请选择操作：");
            System.out.println("1. 加密");
            System.out.println("2. 解密");
            System.out.println("3. 判断密码强度");
            System.out.println("4. 密码生成");
            System.out.println("5. 退出");
            System.out.println();
            System.out.print("请输入选项序号：");

            int choice = scanner.nextInt();
            scanner.nextLine(); // 清空输入缓冲区


        switch (choice) {
            case 1:
                System.out.println("请输入要加密的字符串：");
                String inputEncrypt = scanner.nextLine();
                String encryptedString = encrypt(inputEncrypt);
                System.out.println("加密后的字符串：" + encryptedString);
                break;
            case 2:
                System.out.println("请输入要解密的字符串：");
                String inputDecrypt = scanner.nextLine();
                String decryptedString = decrypt(inputDecrypt);
                System.out.println("解密后的字符串：" + decryptedString);
                break;
            case 3:
                System.out.println("==============================");
                System.out.print("请输入要判断强度的密码：");
                String password = scanner.nextLine();
                String strength = getPasswordStrength(password);
                System.out.println("密码强度为：" + strength);
                break;
            case 4:
                System.out.println("==============================");
                System.out.print("请输入要生成的密码长度：");
                int length = scanner.nextInt();
                scanner.nextLine(); // 清空输入缓冲区
                String generatedPassword = generatePassword(length);
                System.out.println("生成的密码为：" + generatedPassword);
                break;
            case 5:
                System.out.println("退出密码管理系统。");
                scanner.close();
                System.exit(0);
            default:
                System.out.println("无效的选择！");
        }

            System.out.println();
            System.out.println("按任意键返回");
            scanner.nextLine(); // 等待用户按下任意键继续
        }
    }

    private static String encrypt(String input) {
        char[] chars = input.toCharArray();
        int offset = 3;

        // 将每个字符的ASCII码加上它在字符串中的位置和偏移值
        for (int i = 0; i < chars.length; i++) {
            chars[i] = (char) (chars[i] + i + offset);
        }

        // 将字符串的第一位和最后一位调换顺序
        if (chars.length > 1) {
            char temp = chars[0];
            chars[0] = chars[chars.length - 1];
            chars[chars.length - 1] = temp;
        }

        // 将字符串反转
        StringBuilder sb = new StringBuilder();
        for (int i = chars.length - 1; i >= 0; i--) {
            sb.append(chars[i]);
        }

        return sb.toString();
    }

    private static String decrypt(String input) {
        char[] chars = input.toCharArray();

        // 反转字符串
        StringBuilder sb = new StringBuilder();
        for (int i = chars.length - 1; i >= 0; i--) {
            sb.append(chars[i]);
        }

        chars = sb.toString().toCharArray();
        int offset = 3;

        // 将每个字符的ASCII码减去它在字符串中的位置和偏移值
        for (int i = 0; i < chars.length; i++) {
            chars[i] = (char) (chars[i] - i - offset);
        }

        // 将字符串的第一位和最后一位调换顺序
        if (chars.length > 1) {
            char temp = chars[0];
            chars[0] = chars[chars.length - 1];
            chars[chars.length - 1] = temp;
        }

        return new String(chars);
    }
    private static String getPasswordStrength(String password) {
        int length = password.length();
        boolean hasDigit = false;
        boolean hasLowercase = false;
        boolean hasUppercase = false;

        for (int i = 0; i < length; i++) {
            char ch = password.charAt(i);
            if (Character.isDigit(ch)) {
                hasDigit = true;
            } else if (Character.isLowerCase(ch)) {
                hasLowercase = true;
            } else if (Character.isUpperCase(ch)) {
                hasUppercase = true;
            }
        }

        if (length < 8 || (length >= 8 && (!hasDigit || !hasLowercase))) {
            return "弱强度";
        } else if (hasDigit && (hasLowercase || hasUppercase)) {
            return "中强度";
        } else if (hasDigit && hasLowercase && hasUppercase) {
            return "高强度";
        }

        return "未知强度";
    }
    private static String generatePassword(int length) {
        String characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()";
        StringBuilder password = new StringBuilder();

        SecureRandom random = new SecureRandom();
        
        for (int i = 0; i < length; i++) {
            int randomIndex = random.nextInt(characters.length());
            char randomChar = characters.charAt(randomIndex);
            password.append(randomChar);
        }
        
        return password.toString();
    }
}


